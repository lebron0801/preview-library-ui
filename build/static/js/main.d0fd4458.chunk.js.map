{"version":3,"sources":["../webpack/universalModuleDefinition","utils/storage.ts","utils/jsonWebToken.ts","store/reducers/app.ts","store/reducers/user.ts","store/reducers/index.ts","store/sagas/fetchUser.ts","store/sagas/user.ts","store/sagas/index.ts","store/middlewares/loggers.ts","store/index.ts","apis/auth.ts","request/xhr/httpErrorHandler.ts","request/xhr/service.ts","request/xhr/index.ts","store/actions/index.ts","public-path.js","constants/store.ts","routers/RouterMaps.ts","App.tsx","reportWebVitals.ts","config/initializer.ts","index.tsx"],"names":["root","factory","exports","module","define","amd","window","storageConfig","local","set","key","value","expires","params","data","Object","assign","startTime","Date","getTime","localStorage","setItem","JSON","stringify","prototype","toString","call","get","item","getItem","parse","error","removeItem","remove","clear","setToken","tokenInfo","userInfo","access_token","expires_in","token_type","scope","user","getToken","initState","lang","home","curCacheRoute","app","state","action","type","SET_LANG","payload","SET_HOME","SET_CUR_CACHE_ROUTE","account","email","time","UPDATE_USER","combineReducers","updateUser","fetchUser","getUserInfo","res","put","takeLatest","FETCH_USER","delay","takeEvery","UPDATE_USER_ASYNC","rootSaga","all","logger","next","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","loggerMiddleware","run","getTokenInfo","xhr","url","headers","token","Authorization","showStatus","status","message","console","service","axios","create","baseURL","process","post","delete","method","withCredentials","timeout","transformRequest","validateStatus","transformResponse","startsWith","interceptors","request","use","config","qs","Promise","reject","response","setCurCacheRoute","updateUserAsync","getUser","dispatch","getState","a","__POWERED_BY_QIANKUN__","__INJECTED_PUBLIC_PATH_BY_QIANKUN__","asyncRouterMap","path","name","code","component","loadable","nodeType","meta","title","auth","icon","keepAlive","children","baseRouterMap","App","routers","className","basename","map","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","container","ReactDOM","querySelector","document","initializer","bootstrap","log","mount","unmount","unmountComponentAtNode"],"mappings":"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","file":"static/js/main.d0fd4458.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"preview-library-ui-main\"] = factory();\n\telse\n\t\troot[\"preview-library-ui-main\"] = factory();\n})(window, function() {\nreturn ","const storageConfig = {\n  namespace: 'coho_'\n};\n\nconst local = {\n  /**\n   * 存储缓存\n   * @param key 存储键\n   * @param value 存储值\n   * @param expires 缓存有效时间，毫秒\n   */\n  set(key: string, value: any, expires?: number) {\n    const params = { key, value, expires };\n\n    if (expires) {\n      const data = Object.assign(params, { startTime: new Date().getTime() });\n      localStorage.setItem(storageConfig.namespace + key, JSON.stringify(data));\n    } else {\n      if (Object.prototype.toString.call(value) === '[object Object]') {\n        value = JSON.stringify(value);\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Array]') {\n        value = JSON.stringify(value);\n      }\n\n      localStorage.setItem(storageConfig.namespace + key, value);\n    }\n  },\n  /**\n   * 取值\n   * @param key 键\n   * @returns 返回值\n   */\n  get(key: string) {\n    let item: any = localStorage.getItem(storageConfig.namespace + key);\n    // 先将拿到的试着进行json转为对象的形式\n    try {\n      item = JSON.parse(item);\n    } catch (error) {\n      // item = item;\n    }\n\n    // 如果有startTime的值，说明设置了失效时间\n    if (item && item.startTime) {\n      const date = new Date().getTime();\n      // 如果大于就是过期了，如果小于或等于就还没过期\n      if (date - item.startTime > item.expires) {\n        localStorage.removeItem(storageConfig.namespace + key);\n        return null;\n      } else {\n        return item.value;\n      }\n    } else {\n      return item;\n    }\n  },\n  // 删除\n  remove(key: string) {\n    localStorage.removeItem(storageConfig.namespace + key);\n  },\n  // 清除全部\n  clear() {\n    localStorage.clear();\n  }\n};\n\nconst session = {\n  set(key: string, value: any) {\n    const data = {\n      value: value\n    };\n\n    sessionStorage.setItem(storageConfig.namespace + key, JSON.stringify(data));\n  },\n  get(key: string) {\n    const data = sessionStorage.getItem(storageConfig.namespace + key);\n    if (!data || data === 'null') {\n      return null;\n    }\n\n    return JSON.parse(data).value;\n  },\n  remove(key: string) {\n    sessionStorage.removeItem(storageConfig.namespace + key);\n  },\n  clear() {\n    sessionStorage.clear();\n  }\n};\n\nexport { local, session };\n","import { local } from '@utils/storage';\n\n/**\n * 写入token等信息\n * @param {object} tokenInfo token信息\n * @param {object} userInfo 用户信息\n */\nexport const setToken = (tokenInfo: any, userInfo: any) => {\n  local.set('access_token', tokenInfo.access_token, tokenInfo.expires_in * 1000);\n  local.set('token_type', tokenInfo.token_type, tokenInfo.expires_in * 1000);\n  local.set('scope', userInfo.scope, tokenInfo.expires_in * 1000);\n  local.set('user', userInfo.user, tokenInfo.expires_in * 1000);\n};\n\n/**\n * 获取token\n */\nexport const getToken = (): any => {\n  return {\n    access_token: local.get('access_token'),\n    token_type: local.get('token_type'),\n    scope: local.get('scope'),\n    user: local.get('user')\n  };\n};\n","import { SET_LANG, SET_HOME, SET_CUR_CACHE_ROUTE } from '@/constants/store';\n\nconst initState = {\n  lang: 'zh',\n  home: '',\n  curCacheRoute: ''\n};\n\nexport type AppInitState = {\n  /**\n   * 多语言\n   */\n  lang: string;\n  /**\n   * 主页\n   */\n  home: string;\n  /**\n   * 当前缓存路由组件\n   */\n  curCacheRoute: string;\n};\n\ninterface Action {\n  /**\n   * 动作类型\n   */\n  type: string;\n  /**\n   * 需要更新的数据\n   */\n  payload?: AppInitState;\n}\n\nconst app = (state: AppInitState = initState, action: Action = { type: '' }) => {\n  switch (action.type) {\n    case SET_LANG:\n      return (state = { ...state, lang: action.payload!.lang });\n    case SET_HOME:\n      return (state = { ...state, home: action.payload!.home });\n    case SET_CUR_CACHE_ROUTE:\n      return (state = { ...state, curCacheRoute: action.payload!.curCacheRoute });\n    default:\n      return state;\n  }\n};\n\nexport default app;\n","import { UPDATE_USER } from '@/constants/store';\n\nconst initState = {\n  account: 'admin',\n  email: '默认邮箱',\n  time: '2020-10-01'\n};\n\nexport type UserInitState = {\n  /**\n   * 账号\n   */\n  account: string;\n  /**\n   * 邮箱\n   */\n  email: string;\n  /**\n   * 登录时间\n   */\n  time: string;\n};\n\ntype Action = {\n  /**\n   * 动作类型\n   */\n  type: string;\n  /**\n   * 需要更新的数据\n   */\n  payload?: UserInitState;\n};\n\nconst user = (state: UserInitState = initState, action: Action = { type: '' }) => {\n  switch (action.type) {\n    case UPDATE_USER:\n      return (state = { ...state, ...action.payload });\n    default:\n      return state;\n  }\n};\n\nexport default user;\n","import { combineReducers } from 'redux';\nimport app, { AppInitState } from './app';\nimport user, { UserInitState } from './user';\n\nexport interface ReduxStateInterface {\n  app: AppInitState;\n  user: UserInitState;\n}\n\nexport default combineReducers({ app, user });\n","import { FETCH_USER, UPDATE_USER } from '@/constants/store';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { getUserInfo } from '@/apis/auth';\nimport { getToken } from '@/utils/jsonWebToken';\n\nfunction* updateUser() {\n  const res: { scope: string } = yield call(getUserInfo, getToken());\n  // dispatch 一个 action 到 reducer\n  yield put({ type: UPDATE_USER, payload: { account: res.scope } });\n}\n\nfunction* fetchUser() {\n  // 启动saga后, 节流监听此action\n  yield takeLatest(FETCH_USER, updateUser);\n}\n\nexport default [fetchUser()];\n","import { UPDATE_USER_ASYNC, UPDATE_USER } from '@/constants/store';\nimport { put, takeEvery, delay } from 'redux-saga/effects';\n\nfunction* updateUser() {\n  yield delay(2000); // 需要执行异步的时候，直接调用call\n  // dispatch 一个 action 到 reducer\n  yield put({ type: UPDATE_USER, payload: { account: '异步账户' } });\n}\n\nfunction* user() {\n  // 启动saga后, 非节流监听此action\n  yield takeEvery(UPDATE_USER_ASYNC, updateUser);\n}\n\nexport default [user()];\n","import { all } from 'redux-saga/effects';\nimport fetchUser from './fetchUser';\nimport user from './user';\n\nexport default function* rootSaga() {\n  // 同时并发多个 action\n  yield all([...fetchUser, ...user]);\n}\n","interface Action {\n  /**\n   * 动作类型\n   */\n  type: string;\n  /**\n   * 需要更新的数据\n   */\n  payload?: any;\n}\n\nconst loggerMiddleware = () => {\n  return (data: { dispatch: (params: Action) => void; getState: () => void }) => {\n    return (next: (params: Action) => any) => {\n      return (action: Action) => {\n        return next(action);\n      };\n    };\n  };\n};\n\nconst logger = loggerMiddleware();\n\nexport default logger;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '@/store/reducers';\nimport rootSaga from './sagas';\nimport thunk from 'redux-thunk';\nimport loggerMiddleware from './middlewares/loggers';\n\n// 创建saga中间件\nconst sagaMiddleware = createSagaMiddleware();\n// 创建管理器\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware, thunk, loggerMiddleware)));\n// 启动sage\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import xhr from '@/request/xhr';\n\n/**\n * 用户登录，获取token\n */\nexport const getTokenInfo = (data: any) =>\n  xhr({\n    url: '/connect/token',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    data\n  });\n\n/**\n * 获取用户信息\n */\nexport const getUserInfo = (token: any) =>\n  xhr({\n    url: '/connect/userinfo',\n    headers: {\n      Authorization: `${token.token_type} ${token.access_token}`\n    }\n  });\n","const showStatus = (status: number) => {\n  let message = '';\n  switch (status) {\n    case 400:\n      message = '请求错误(400)';\n      break;\n    case 401:\n      message = '未授权，请重新登录(401)';\n      break;\n    case 403:\n      message = '拒绝访问(403)';\n      break;\n    case 404:\n      message = '请求出错(404)';\n      break;\n    case 408:\n      message = '请求超时(408)';\n      break;\n    case 500:\n      message = '服务器错误(500)';\n      break;\n    case 501:\n      message = '服务未实现(501)';\n      break;\n    case 502:\n      message = '网络错误(502)';\n      break;\n    case 503:\n      message = '服务不可用(503)';\n      break;\n    case 504:\n      message = '网络超时(504)';\n      break;\n    case 505:\n      message = 'HTTP版本不受支持(505)';\n      break;\n    default:\n      message = `连接出错(${status})!`;\n  }\n\n  console.error(`http请求错误，原因: [${message}，请检查网络或联系管理员！]`);\n};\n\nexport default showStatus;\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport showStatus from './httpErrorHandler';\nimport qs from 'querystring';\nimport { local } from '@utils/storage';\n\nconst service: any = axios.create({\n  baseURL: process.env.REACT_APP_SERVICE_URL,\n  headers: {\n    get: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n    },\n    post: {\n      'Content-Type': 'application/json;charset=utf-8'\n    },\n    put: {\n      'Content-Type': 'application/json;charset=utf-8'\n    },\n    delete: {\n      'Content-Type': 'application/json;charset=utf-8'\n    }\n  },\n  method: 'post',\n  // 告诉浏览器是否发送Cookie\n  withCredentials: false,\n  timeout: 30000,\n  transformRequest: [\n    (data) => {\n      data = JSON.stringify(data);\n      return data;\n    }\n  ],\n  validateStatus() {\n    // 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常\n    return true;\n  },\n  transformResponse: [\n    (data) => {\n      if (typeof data === 'string' && data.startsWith('{')) {\n        data = JSON.parse(data);\n      }\n      return data;\n    }\n  ]\n});\n\n// 请求拦截器\nservice.interceptors.request.use(\n  (config: AxiosRequestConfig) => {\n    if (config.headers['Content-Type'] === 'multipart/form-data') {\n      config.transformRequest = [];\n    }\n\n    if (config.headers['Content-Type'] === 'application/x-www-form-urlencoded') {\n      config.transformRequest = [\n        (data) => {\n          data = qs.stringify(data);\n          return data;\n        }\n      ];\n    }\n\n    // config.headers['Authorization'] = `${local.get('token_type')} ${local.get('access_token')}`;\n\n    return config;\n  },\n  (error: any) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\nservice.interceptors.response.use(\n  (response: AxiosResponse) => {\n    const status = response.status; // 服务器状态码\n    if (status < 200 || status >= 300) {\n      showStatus(status);\n    }\n\n    return response.data;\n  },\n  (error: any) => {\n    showStatus(error.status);\n\n    return Promise.reject(error);\n  }\n);\n\nexport default service;\n","import xhr from './service';\n/**\n * XHR 请求接口定义\n * @param  {String} options.method 请求方法，默认为 post\n * @param  {String} options.url    请求路径，默认空字符串\n * @param  {Object} options.data   post方式下的请求体，默认 null\n * @param  {Object} options.params   get方式下的请求体，默认 null\n * @param  {Object} options.headers 自定义请求头，一般不用填\n * @param  {String} options.baseURL 请求域名，默认读取全局变量\n * @return {Promise}\n * 使用例子 xhr({ method: 'post', url: 'XXX', data: {Object}, headers:{Object}, baseURL: \"http://192.168.1.181:1234567/\" })\n */\nexport default xhr;\n","import { UPDATE_USER, SET_LANG, SET_HOME, SET_CUR_CACHE_ROUTE, FETCH_USER, UPDATE_USER_ASYNC } from '@/constants/store';\nimport { ReduxStateInterface } from '@/store/reducers';\nimport { Dispatch, AnyAction } from 'redux';\nimport { getUserInfo } from '@/apis/auth';\nimport { getToken } from '@/utils/jsonWebToken';\n\ntype ReturnFunc = () => AnyAction;\n\nexport interface ActionCreatorFunc {\n  updateUser: (payload: any) => AnyAction;\n  setLang: ReturnFunc;\n  setHome: ReturnFunc;\n  setCurCacheRoute: ReturnFunc;\n  updateUserAsync: ReturnFunc;\n  fetchUser: ReturnFunc;\n  getUser: (data?: any) => Promise<void>;\n}\n\n// 以下是普通的Action Creator, 不基于任何中间件\nexport const updateUser = (payload: any) => ({ type: UPDATE_USER, payload });\nexport const setLang = () => ({ type: SET_LANG });\nexport const setHome = () => ({ type: SET_HOME });\nexport const setCurCacheRoute = (payload: any) => ({ type: SET_CUR_CACHE_ROUTE, payload });\n\n// 以下基于redux-saga中间件来实现的Action Creator\nexport const updateUserAsync = () => ({ type: UPDATE_USER_ASYNC });\nexport const fetchUser = () => ({ type: FETCH_USER });\n\n// 以下基于redux-thunk中间件来实现的Action Creator\nexport const getUser = (data?: any) => async (dispatch: Dispatch, getState: () => ReduxStateInterface) => {\n  const res = await getUserInfo(getToken());\n  dispatch({ type: UPDATE_USER, payload: { account: res.scope } });\n};\n","if (window.__POWERED_BY_QIANKUN__) {\n  const __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n}\n","/**\n * 状态管理器 常量列表\n */\nexport const UPDATE_USER = 'UPDATE_USER'; // 更新用户信息\nexport const SET_LANG = 'SET_LANG'; // 设置多语言\nexport const SET_HOME = 'SET_HOME'; // 设置主页\nexport const SET_CUR_CACHE_ROUTE = 'SET_CUR_CACHE_ROUTE'; // 设置当前缓存路由\n\nexport const FETCH_USER = 'FETCH_USER'; // 拉取用户信息\nexport const UPDATE_USER_ASYNC = 'UPDATE_USER_ASYNC'; // 异步更新用户信息\n","import loadable from '@loadable/component';\n\n/**\n * 业务路由\n */\nexport const asyncRouterMap: RouteObject[] = [\n  {\n    path: '/',\n    name: '主框架',\n    code: 'framework',\n    component: loadable(() => import('@/pages/framework/Index')),\n    nodeType: 'page',\n    meta: { title: '主框架', auth: false, icon: '', keepAlive: true },\n    children: []\n  }\n];\n\n/**\n * 基础路由\n */\nexport const baseRouterMap: RouteObject[] = [\n  {\n    path: '/user/login',\n    name: '登录',\n    code: 'login',\n    nodeType: 'page',\n    component: loadable(() => import('@pages/user/Login')),\n    meta: { title: '登录', auth: false, icon: '', keepAlive: true }\n  }\n];\n","import React from 'react';\nimport { HashRouter, Route, Switch, RouteComponentProps } from 'react-router-dom';\nimport { baseRouterMap, asyncRouterMap } from '@/routers/RouterMaps';\nimport '@assets/less/App.less';\n\nconst App: React.FC = () => {\n  const routers = [...baseRouterMap, ...asyncRouterMap];\n  return (\n    <div className=\"App\">\n      <HashRouter basename={window.__POWERED_BY_QIANKUN__ ? '/ees' : process.env.PUBLIC_URL}>\n        <Switch>\n          {routers.map((item) => {\n            return (\n              <Route\n                key={item.code}\n                path={item.path}\n                render={(props: RouteComponentProps) => <item.component {...{ ...props, meta: item.meta }} />}\n              ></Route>\n            );\n          })}\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import store from '@/store';\nimport { updateUser } from '@/store/actions';\n\nexport default () => {\n  store.dispatch(updateUser({ account: '默认值' }));\n};\n","import './public-path';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@/imports';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from '@/store';\nimport initializer from '@/config/initializer';\n\nfunction render(props: any = {}) {\n  const { container } = props;\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    container ? container.querySelector('#root') : document.querySelector('#root'),\n    () => initializer()\n  );\n}\n\nif (!window.__POWERED_BY_QIANKUN__) {\n  render();\n}\n\nexport async function bootstrap() {\n  console.log('应用开始启动');\n}\n\nexport async function mount(props: any) {\n  console.log('应用挂载后的参数信息', props);\n  render(props);\n}\n\nexport async function unmount(props: any) {\n  const { container } = props;\n  ReactDOM.unmountComponentAtNode(container ? container.querySelector('#root') : document.querySelector('#root'));\n}\n\nreportWebVitals();\n"],"sourceRoot":""}